# -*- coding: utf-8 -*-
"""Weather forecasting

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/174AdnYOpKFH8iCZme_xtx--q-qwa-rNv
"""

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, TimeSeriesSplit
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# -------------------------
# Load Weather Data
# -------------------------

url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv"
df = pd.read_csv(url, parse_dates=['Date'])

# Feature Engineering
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day

# Use Previous Day's Temperature as a Feature (Lag Feature)
df['Prev_Temp'] = df['Temp'].shift(1)

# Drop NaN values created by shifting
df.dropna(inplace=True)

# Define Features (X) and Target (y)
X = df[['Year', 'Month', 'Day', 'Prev_Temp']]
y = df['Temp']

# Scale Features (Standardization)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Use Polynomial Features (Degree=2) for Better Prediction
poly = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly.fit_transform(X_scaled)

# Split Data using Time-based split (important for time-series)
split_index = int(len(X_poly) * 0.8)  # 80% Train, 20% Test
X_train, X_test = X_poly[:split_index], X_poly[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

# Train Model
model = LinearRegression()
model.fit(X_train, y_train)

# Make Predictions
y_pred = model.predict(X_test)

# Evaluate Model
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

# Print Results
print("Improved Mean Absolute Error (MAE):", mae)
print("Improved Root Mean Squared Error (RMSE):", rmse)

# -------------------------
# Plot Actual vs Predicted Temperatures
# -------------------------

plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred, alpha=0.5, color='blue')
plt.xlabel("Actual Temperature")
plt.ylabel("Predicted Temperature")
plt.title("Actual vs Predicted Temperatures (Improved Model)")
plt.show()